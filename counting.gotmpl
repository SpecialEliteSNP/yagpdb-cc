{{/* SETUP:
     - Set the restrictions to only run in your counting channel
     - Set the trigger type to Regex and the trigger to: \A
*/}}

{{/* VARIABLES - You can edit these values */}}
  {{/* Emoji to be added to the latest correct count */}}
    {{ $emoji := "‚òë" }}

  {{/* Responses: */}}
    {{/* Message when they get the count wrong */}}
      {{ $wrong := "not the right number bud üòÖ" }}
    {{/* Message when they try to count twice in a row */}}
      {{ $twice := "we do counting together üò†" }}
    {{/* Milestone notification for every 1000 */}}
      {{ $1000_ntf := "Holy moly, have we really reached" }}
    {{/* Milestone notification for every 100 */}}
      {{ $100_ntf := "We have reached" }}

  {{/* Warnings */}}
    {{/* Info message when the latest correct count was changed (edited or deleted) */}}
      {{ $change_msg := "we're currently at:" }}
    {{/* Warn when a member deletes their latest correct count */}}
      {{ $warn_on_del := false }}
    {{/* Warning message */}}
      {{ $warn_msg := "Don't delete your latest correct count!" }}
    {{/* Role to ignore when trying to warn. This should be the roles above the bot since it can't warn members with a role higher than itself. */}}
      {{ $ignored_roles := cslice 763447831829938176 764103587223044116 778952687986802698 }}


{{/* CODE - Don't edit this part */}}
{{ $c := sdict }}{{ with (dbGet 20 "counting").Value }}{{ $c = sdict . }}{{ end }}
{{ if not $c }}
	{{ print .User.Mention ", <#" .Channel.ID "> is all set up as your counting channel!" }}
	{{ addReactions $emoji }}
  {{ dbSet 20 "counting" (sdict "c" 1 "m" 0 "u" 0 "w" 0) }}
{{ else if or (not (reFind `\A\d+\z` .Message.Content)) (ne $c.c (toInt .Message.Content)) }}
  {{ addReactions "‚ùå" }}
  {{ deleteTrigger 1 }}
  {{ $m := getMessage nil $c.m }}
  {{ if or (not $m) (ne (sub $c.c 1) (toInt $m.Content)) }}
    {{ print .User.Mention ", " $change_msg " `" $c.c "`" }}
    {{ $w := true }}{{ range (getMember $m.Author.ID).Roles }}{{ if in $ignored_roles . }}{{ $w = false }}{{ end }}{{ end }}
    {{ if and $warn_on_del (not $c.w) $w }}{{ $s := execAdmin "warn" $c.u $warn_msg }}{{ $c.Set "w" 1 }}{{ dbSet 20 "counting" $c}}{{ end }}
  {{ else }}
    {{ print .User.Mention ", " $wrong }}
  {{ end }}
  {{ deleteResponse 10 }}
{{ else if eq .User.ID $c.u }}
  {{ addReactions "üëé" }}
  {{ deleteTrigger 5 }}
  {{ print .User.Mention ", " $twice }}
  {{ deleteResponse 5 }}
{{ else }}
  {{ deleteAllMessageReactions nil $c.m }}
  {{ addReactions $emoji }}
  {{ dbSet 20 "counting" (sdict "c" (add $c.c 1) "m" .Message.ID "u" .User.ID) }}
  {{ if eq (toInt (mod $c.c 1000)) 0 }}
    {{ print $1000_ntf " " $c.c "?! üò≤" }}
  {{ else if eq (toInt (mod $c.c 100)) 0 }}
    {{ print $100_ntf " " $c.c "! üéâ" }}
  {{ end }}
{{ end }}