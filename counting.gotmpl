{{/* SETUP:
     - Set the restrictions to only run in your counting channel
     - Set the trigger type to Regex and the trigger to: \A
*/}}

{{/* VARIABLES - You can edit these values */}}
{{ $wrong_number := "not the right number bud 😅" }}{{/* Message when they get the count wrong */}}
{{ $ego_member := "we do counting together 😠" }}{{/* Message when they try to count twice in a row */}}
{{ $1000_ntf := "Holy moly, have we really reached" }}{{/* Milestone notification for every 1000 */}}
{{ $100_ntf := "We have reached" }}{{/* Milestone notification for every 100 */}}
{{ $warn_on_delete := false }}{{/* Warn when a member deletes their latest correct count */}}


{{/* CODE - Don't edit this part */}}
{{ $c := sdict }}
{{ with (dbGet 20 "counting").Value }}{{ $c = sdict . }}{{ end }}

{{ if not $c }}
  {{ dbSet 20 "counting" (sdict "c" 1 "m" 0 "u" 0) }}
{{ else if or (not (reFind `\A\d+\z` .Message.Content)) (ne $c.c (toInt .Message.Content)) }}
  {{ addReactions "❌" }}
  {{ deleteTrigger 1 }}
  {{ if not (getMessage nil $c.m) }}
    {{ if $warn_on_delete }}{{ execAdmin "warn" $c.u "Don't delete your latest correct count." }}{{ end }}
    We're currently at: `{{ $c.c }}`
  {{ else }}
    {{ print .User.Mention ", " $wrong_number }}
  {{ end }}
  {{ deleteResponse 5 }}
{{ else if eq .User.ID $c.u }}
  {{ addReactions "👎" }}
  {{ deleteTrigger 5 }}
  {{ print .User.Mention ", " $ego_member }}
  {{ deleteResponse 5 }}
{{ else }}
  {{ deleteAllMessageReactions nil $c.m }}
  {{ addReactions "☑" }}
  {{ dbSet 20 "counting" (sdict "c" (add $c.c 1) "m" .Message.ID "u" .User.ID) }}
  {{ if eq (toInt (mod $c.c 1000)) 0 }}
    {{ print $1000_ntf " " $c.c "?! 😲" }}
  {{ else if eq (toInt (mod $c.c 100)) 0 }}
    {{ print $100_ntf " " $c.c "! 🎉" }}
  {{ end }}
{{ end }}